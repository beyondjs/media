/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/media/fs';
// json-file.ts
declare namespace ns_0 {
  import File = __beyond_dep_ns_0.File;
  /**
   * JSON file abstraction on top of the reactive `File` core.
   * ---------------------------------------------------------
   * Responsibilities:
   *  - Load the file content into a JS object (`load`)
   *  - Patch selected keys and persist immediately (`patch`)
   *  - Replace the entire object and persist (`replace`)
   *  - Update in-memory data without persistence (`update`)
   *  - Clear in-memory data (`clean`)
   *
   * Events:
   *  - 'data.loaded'     → after loading from disk
   *  - 'data.updated'    → after an in-memory update
   *  - 'data.cleaned'    → after clearing the object
   *  - 'write.completed' → after a patch or replace is flushed to disk
   */
  export class JsonFile extends File {
    #private;
    /** Returns the current in-memory JSON value */
    get data(): any;
    /** Reads the file, parses JSON, stores it in memory and notifies listeners */
    load(): Promise<void>;
    /**
     * Shallow-merges partial keys into the current object and persists the result.
     * @param partial Keys to override or add.
     */
    patch(partial: Record<string, unknown>): Promise<void>;
    /**
     * Guarda el objeto JSON y lo persiste.
     * @param newData El valor a guardar.
     * @param overwrite Si es true, reemplaza todo el objeto; si es false (por defecto), hace merge superficial.
     */
    save(newData: Record<string, unknown>, overwrite?: boolean): Promise<void>;
    /**
     * Updates the in-memory object without writing to disk.
     * Useful for batching multiple changes before a manual `patch`/`replace`
     * or for transient state handling in the application layer.
     * @param partial Keys to override or add.
     */
    update(partial: Record<string, unknown>): void;
    /**
     * Clears the in-memory object without writing to disk.
     * Call `replace({})` if you also need to persist the empty state.
     */
    clean(): void;
  }
}


// parsers\json-parser.ts
declare namespace ns_1 {
  /**
   * Parser for JSON files
   */
  import IParser = __beyond_dep_ns_0.IParser;
  import IFile = __beyond_dep_ns_0.IFile;
  export class JsonParser implements IParser<unknown> {
    canHandle(file: IFile): boolean;
    parse(file: IFile): Promise<unknown>;
  }
}


// text-file.ts
declare namespace ns_2 {
  import File = __beyond_dep_ns_0.File;
  import IReadOptions = __beyond_dep_ns_0.IReadOptions;
  import IWriteOptions = __beyond_dep_ns_0.IWriteOptions;
  /** Text-oriented wrapper around the generic File */
  export class TextFile extends File {
    readText(opts?: IReadOptions): Promise<string>;
    writeText(content: string, opts?: IWriteOptions): Promise<void>;
  }
}


// utils\text-codec.ts
declare namespace ns_3 {
  export const encode: (s: string) => Uint8Array;
  export const decode: (b: Uint8Array) => string;
}


export import JsonFile = ns_0.JsonFile;
export import JsonParser = ns_1.JsonParser;
export import TextFile = ns_2.TextFile;
export import encode = ns_3.encode;
export import decode = ns_3.decode;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };