/************
Processor: ts
************/

import * as __beyond_dep_ns_0 from '@beyond-js/media/fs';
// json-file.ts
declare namespace ns_0 {
  import File = __beyond_dep_ns_0.File;
  export class JsonFile extends File {
    #private;
    get data(): unknown;
    set data(v: unknown);
    load(): Promise<void>;
  }
}


// parsers\json-parser.ts
declare namespace ns_1 {
  /**
   * Parser for JSON files
   */
  import IParser = __beyond_dep_ns_0.IParser;
  import IFile = __beyond_dep_ns_0.IFile;
  export class JsonParser implements IParser<unknown> {
    canHandle(file: IFile): boolean;
    parse(file: IFile): Promise<unknown>;
  }
}


// text-file.ts
declare namespace ns_2 {
  import File = __beyond_dep_ns_0.File;
  import IReadOptions = __beyond_dep_ns_0.IReadOptions;
  import IWriteOptions = __beyond_dep_ns_0.IWriteOptions;
  /** Text-oriented wrapper around the generic File */
  export class TextFile extends File {
    readText(opts?: IReadOptions): Promise<string>;
    writeText(content: string, opts?: IWriteOptions): Promise<void>;
  }
}


// utils\text-codec.ts
declare namespace ns_3 {
  export const encode: (s: string) => Uint8Array;
  export const decode: (b: Uint8Array) => string;
}


export import JsonFile = ns_0.JsonFile;
export import JsonParser = ns_1.JsonParser;
export import TextFile = ns_2.TextFile;
export import encode = ns_3.encode;
export import decode = ns_3.decode;

export declare const hmr: {on: (event: string, listener: any) => void, off: (event: string, listener: any) => void };